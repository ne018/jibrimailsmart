#!/usr/bin/python3
import sys
import os
import shutil
import time
import json
import urllib.parse
import requests
import smtplib, ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

print("work in progress...")

recording_path = "/srv/recordings/"
exposed_path = "/exposed/recordings/"
## Email Credentials Config can be found in /etc/mailsmart.json
## { "bucket_prefix": "https://domain.s3-ap-southeast-1.amazonaws.com/", "domain": "meet.jits.si", "email": "sender@jit.si", "password": "password", "server": "mail.domain.com", "port": "587" }

email_conf = "/etc/mailsmart.json"

## This file is generated by custom ffmpeg

fullpath = "/tmp/fullpath.tmp"
filename = "/tmp/filename.tmp"
metadata = "/tmp/metadata.tmp"
publish_command = "cp -v %s %s"

def file_get_contents(filename):
    if os.path.exists(filename):
        fp = open(filename, "r")
        content = fp.read()
        fp.close()
        return content

def get_metadata(metadata_location=None, parent_folder=None):
    try:
        if metadata_location is None or os.path.exists(metadata_location) == False:
            raise ValueError("[ERROR] Metadata should not be empty or it must be exists")
            return -1
        else:
            filehandler = open(metadata_location,'r')
            meta = filehandler.read()
            filehandler.close()
            meta = meta.split('\n')[0]
            meta = parent_folder + meta + "/" + "metadata.json"
            f = open(meta,'r')
            metadata = json.load(f)
            return metadata
    except ValueError:
        print("Parameter should be specified!")
        return -1

def make_it_public(source=None, destination=None):
    try:
        if source is None or source == '' or destination is None or destination == '':
            raise ValueError('[ERROR] Source and Destination should be provided')
            return -1
        else:
            print("[OK] Exposing to public urls")
            global publish_command
            publish_command = publish_command % (source, destination)
            os.system(publish_command)
            #shutil.move(source,destination)
    except ValueError:
        print("Parameter should be specified!")
        return -1

def send_mail(receiver_email, conf=None, filename=None):
    try:
        if conf is None or os.path.exists(conf) == False or filename is None or os.path.exists(filename) == False or receiver_email is None or receiver_email == '':
            raise ValueError("File must be exists or should be specified")
            return -1
        else:
            conf_handler = open(conf)
            credential_handler = json.load(conf_handler)
    except ValueError:
        print("Parameter should be specified!")
        return -1

    message = MIMEMultipart()
    message["Subject"] = "Download and watch your recorded video"
    message["From"] = credential_handler['email']
    message["To"] = receiver_email
    #message["Bcc"] = receiver_email # for mass mails

    text = """\
        Hi there,
        You may download your recorded video on the link below:
        %s
        - Cloud Recording System
        """

    html = """\
        <html>
        <body>
        <p>Hi there,<br>
        You may download your recorded video on the link below: <br>
        <a href="%s">Click to Open</a>
        <br>- Cloud Recording System <br>
        </p>
        </body>
        </html>
        """
    text = text % (credential_handler['bucket_prefix'] + credential_handler['domain'] + "/" + file_get_contents(filename))
    html = html % (credential_handler['bucket_prefix'] + credential_handler['domain'] + "/" + file_get_contents(filename))
    part1 = MIMEText(text,"plain")
    part2 = MIMEText(html, "html")
    message.attach(part1)
    message.attach(part2)
    smtp_handler = smtplib.SMTP(credential_handler['server'])
    smtp_handler.starttls()
    smtp_handler.login(credential_handler['email'], credential_handler['password'])
    smtp_handler.sendmail(message['From'], message['To'], message.as_string())
    smtp_handler.quit()



meta_dict = get_metadata(metadata_location=metadata, parent_folder=recording_path)
for i in range(0, len(meta_dict['participants'])):
    receiver_email = meta_dict['participants'][i]['user']['id']
    send_mail(receiver_email=receiver_email, conf=email_conf, filename=filename)